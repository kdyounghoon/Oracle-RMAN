<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="ConfigElementAccessor" result-type="Any" api-version="6.0.0" id="b289aafa-cdfc-36c0-b637-5ece81044e0d" version="2.18.5" allowed-operations="vef" category-name="com.vmware.pscoe.library.util">
  <description><![CDATA[Handles working with configuration elements. Provides out of the box getting
setting attributes of the configuration element as well as an array of all
attributes and the configuration element itself.]]></description>
  <script encoded="false"><![CDATA[var Class = System.getModule("com.vmware.pscoe.library.class").Class();

var ConfigElementAccessor = Class.define(function ConfigElementAccessor(categoryPath, elementName, createIfMissing) {
	this.logger = System.getModule("com.vmware.pscoe.library.logging").getLogger(
		"com.vmware.pscoe.library.util.ConfigElementAccessor");

	var category = Server.getConfigurationElementCategoryWithPath(categoryPath);
	if (category === null) {
		if (createIfMissing) {
			this.configElement = Server.createConfigurationElement(categoryPath, elementName);
		}
	} else {
		var result = Server.query("ConfigurationElement", "categoryid='" + System.getObjectId(category) +
			"' and name='" + elementName + "'");

		if (result.length > 1) {
			throw "Found more than 1 configuration element with path '" + categoryPath + "' and name '" + elementName +
				"'. " + "This is not supported and indicates an inconsistency.";
		}
		this.configElement = result[0];

		if (!this.configElement &&
			createIfMissing) {
			this.configElement = Server.createConfigurationElement(categoryPath, elementName);
		}
	}

	if (this.configElement == null) {
		throw "Configuration element " + elementName + " with path " + categoryPath + " not found";
	}
}, {
	/**
	 * @param {string} attrName The key of the attribute to return.
	 * @param {string} defaultValue The default value of the attribute
	 * 								in case the value is null or not defined.
	 * @return The value of the attrName attribute if not null or undefined.
	 */
	get: function (attrName, defaultValue) {
		try {
			this.configElement.reload();
			var attrib = this.configElement.getAttributeWithKey(attrName);
			if (attrib == null) {
				return defaultValue;
			}
			var value = attrib.value;
			var valType = System.getObjectType(value);
			switch (valType) {
				case "string":
					if (value.length > 0) {
						return value;
					}
					break;
				case "boolean":
					return value;
				default:
					if (value !== null && value !== undefined) {
						return value;
					}
			}
			this.logger.debug("Value for attribute '" + attrName + "' not found. Returning default value: " +
				defaultValue);
			return defaultValue;
		} catch (err) {
			this.logger.error("Error retrieving configuration value: " + err);
			return defaultValue;
		}
	},

	/**
	 * @param {string} attrName The key of the attribute whose value to set.
	 * @param value The new value of the attribute.
	 */
	set: function (attrName, value) {
		this.logger.debug("Setting value for attribute '" + attrName + "': " + value);
		this.configElement.setAttributeWithKey(attrName, value);
	},

	/**
	 * Remove an attribute.
	 * @param {string} attrName The key of the attribute to remove.
	 */
	remove: function (attrName) {
		this.logger.debug("Removing value for attribute '" + attrName + "'");
		this.configElement.removeAttributeWithKey(attrName);
	},

	/**
	 * @return The ConfigurationElement itself.
	 */
	getElement: function () {
		return this.configElement;
	},

	/**
	 * @deprecated use getElement.
	 * @return The ConfigurationElement itself.
	 */
	element: function () {
		return this.getElement();
	},

	/**
	 * @return An array of the attributes of the ConfigurationElement.
	 */
	getAttributes: function () {
		return this.configElement.attributes;
	},

	/**
	 * @deprecated use getAttributes.
	 * @return An array of the attributes of the ConfigurationElement.
	 */
	attributes: function () {
		return this.getAttributes();
	},

	/**
	 * Converts the configuration element into JSON.
	 * @return JSON representation of the ConfigurationElement
	 */
	toJson: function () {
		this.configElement.reload();

		var json = {};
		(this.configElement.attributes || []).forEach(function (attr) {
			json[attr.name] = attr.value;
		});

		return json;
	}
});

return ConfigElementAccessor;
]]></script>
</dunes-script-module>